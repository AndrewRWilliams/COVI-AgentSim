# `sample` can be
# - `uniform` (from np.random.uniform(*from))
# - `range` (np.choice(np.arange(*from)))
# - `list` (np.choice(from))
# - `cartesian` special case where a cartesian product of all keys with the `cartesian` sampling scheme
#               is created and iterated over in order. `from` MUST be a list
#               As we iterate over the cartesian product of all
#               such keys, others are sampled as usual. If n_search is larger than the size of the cartesian
#               product, it will cycle again through the product in the same order
#               example with A being `cartesian` from [1, 2] and B from [y, z] and 5 searches:
#                  => {A:1, B: y}, {A:1, B: z}, {A:2, B: y}, {A:2, B: z}, {A:1, B: y}
# - `sequential` samples will loop through the values in `from`. `from` MUST be a list

tracing_method: transformer
n_people: 1000
simulation_days: 30
INTERVENTION_DAY: 5
init_percent_sick: 0.002
DROPOUT_RATE: 0.02
P_CAREFUL_PERSON: 0.3
GLOBAL_MOBILITY_SCALING_FACTOR: 1
tune: true

APP_UPTAKE: # for sole reproducibility purposes
  sample: cartesian # loop through list sequentially, in order
  from:   # Ad. Rate
    - 0.1 # 0.071203
    - 0.3 # 0.213609
    - 0.5 # 0.356015
    - 0.7 # 0.49842099999999995
    - 1   # 0.49842099999999995

seed: # for sole reproducibility purposes
  sample: cartesian # loop through list sequentially, in order
  from:
    - 2000
    - 2001
    - 2002
    - 2003
    - 2004

# export WEIGHTS=SMART-VALLEY; python random_search.py infra=mila n_search=25 n_runs_per_search=1 gres="gpu:1" partition=long env_name=covid38 tune=true outdir=/network/tmp1/schmidtv/covid_sims/model_selection/$WEIGHTS exp_file=transformer_eval weights=$tv/$WEIGHTS dev=true

















# export WEIGHTS=DASHING-UNIVERSE-393A; python random_search.py infra=intel n_search=5 env_name=covid-victor tune=true outdir=/home/mila/model_selection/$WEIGHTS exp_file=transformer_eval weights=/home/mila/$WEIGHTS dev=true