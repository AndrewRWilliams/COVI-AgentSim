# `sample` can be
# - `uniform` (from np.random.uniform(*from))
# - `range` (np.choice(np.arange(*from)))
# - `list` (np.choice(from))
# - `cartesian` special case where a cartesian product of all keys with the `cartesian` sampling scheme
#               is created and iterated over in order. `from` MUST be a list
#               As we iterate over the cartesian product of all
#               such keys, others are sampled as usual. If n_search is larger than the size of the cartesian
#               product, it will cycle again through the product in the same order
#               example with A being `cartesian` from [1, 2] and B from [y, z] and 5 searches:
#                  => {A:1, B: y}, {A:1, B: z}, {A:2, B: y}, {A:2, B: z}, {A:1, B: y}
# - `sequential` samples will loop through the values in `from`. `from` MUST be a list

tracing_method: transformer
run_type: collect-all
n_people: 3000
simulation_days: 30
INTERVENTION_DAY: 5
init_percent_sick: 0.01
DROPOUT_RATE: 0.02


APP_UPTAKE:
  sample: cartesian # will be sampled in this order
  from:
    - 0.1
    - 0.3
    - 0.6
    - 0.8

seed: # for sole reproducibility purposes
  sample: cartesian # uniform int choice
  from:
    - 3000
    - 3001
    - 3002
